import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(request: NextRequest) {
  const response = NextResponse.next();
  const { pathname } = request.nextUrl;
  
  // Apply strict CSP for plugin pages
  if (pathname.startsWith('/apps/') && pathname !== '/apps') {
    const nonce = crypto.randomUUID();
    
    // Store nonce in response headers for use in pages
    response.headers.set('x-nonce', nonce);
    
    // Strict CSP for plugin pages
    const csp = [
      `default-src 'self'`,
      `script-src 'self' 'nonce-${nonce}' 'strict-dynamic'`,
      `style-src 'self' 'unsafe-inline'`, // Unfortunately needed for Tailwind
      `img-src 'self' data: https:`,
      `font-src 'self' data:`,
      `connect-src 'self'`,
      `frame-src 'self'`, // Allow iframes from same origin only
      `frame-ancestors 'self'`,
      `object-src 'none'`,
      `base-uri 'self'`,
      `form-action 'self'`,
      `upgrade-insecure-requests`,
    ].join('; ');
    
    response.headers.set('Content-Security-Policy', csp);
  } else {
    // Standard CSP for non-plugin pages
    const csp = [
      `default-src 'self'`,
      `script-src 'self' 'unsafe-inline' 'unsafe-eval'`, // More permissive for app functionality
      `style-src 'self' 'unsafe-inline'`,
      `img-src 'self' data: https:`,
      `font-src 'self' data:`,
      `connect-src 'self' https://api.btcpayserver.org`,
      `frame-ancestors 'none'`,
      `object-src 'none'`,
      `base-uri 'self'`,
      `form-action 'self'`,
      `upgrade-insecure-requests`,
    ].join('; ');
    
    response.headers.set('Content-Security-Policy', csp);
  }
  
  // Additional security headers
  response.headers.set('X-Content-Type-Options', 'nosniff');
  response.headers.set('X-Frame-Options', 'DENY');
  response.headers.set('X-XSS-Protection', '1; mode=block');
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');
  
  // Prevent plugins from accessing sensitive routes
  if (pathname.startsWith('/api/') && request.headers.get('x-plugin-request')) {
    return new NextResponse('Forbidden', { status: 403 });
  }
  
  return response;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
};